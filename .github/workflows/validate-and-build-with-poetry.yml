name: Validate and Build with Poetry

on: push

jobs:
  build:
    name: Build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.6", "3.7", "3.8", "3.9"]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv if cache exists
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ matrix.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies if cache does not exist
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      # - name: Validate, generate, and test
      #   run: |
      #     source $VENV
      #     poetry run doit
      - name: generate and make libtk205
        if: matrix.os != 'windows-latest'
        run: |
          source $VENV
          mkdir build
          cd build
          poetry run cmake ..
          poetry run make
      - name: test wd (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          source $VENV
          cd schema-205
          poetry run doit headers
          poetry run doit cpp
      - name: generate and build libtk205 (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          source $VENV
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release
